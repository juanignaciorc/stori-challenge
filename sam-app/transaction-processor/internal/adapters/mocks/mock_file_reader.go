// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/file_reader.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/file_reader.go -destination=internal/adapters/mocks/mock_file_reader.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "transaction-processor/internal/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockFileReader is a mock of FileReader interface.
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderMockRecorder
	isgomock struct{}
}

// MockFileReaderMockRecorder is the mock recorder for MockFileReader.
type MockFileReaderMockRecorder struct {
	mock *MockFileReader
}

// NewMockFileReader creates a new mock instance.
func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &MockFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileReader) EXPECT() *MockFileReaderMockRecorder {
	return m.recorder
}

// ReadTransactions mocks base method.
func (m *MockFileReader) ReadTransactions(filePath string) ([]*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTransactions", filePath)
	ret0, _ := ret[0].([]*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransactions indicates an expected call of ReadTransactions.
func (mr *MockFileReaderMockRecorder) ReadTransactions(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransactions", reflect.TypeOf((*MockFileReader)(nil).ReadTransactions), filePath)
}
